<?php

namespace Paytic\Omnipay\Mobilpay\Models\Request;

use DOMDocument;
use DOMElement;
use Exception;
use stdClass;

/**
 * Class Mobilpay_Payment_Request_Abstract
 * This class can be used for accessing mobilpay.ro payment interface for your configured online services
 * @copyright NETOPIA System
 * @author Claudiu Tudose
 * @version 1.0
 *
 * This class uses  OpenSSL
 * In order to use the OpenSSL functions you need to install the OpenSSL package.
 * Check PHP documentation for installing OpenSSL package
 */
abstract class AbstractRequest
{
    use Traits\HasXmlDocument;

    const PAYMENT_TYPE_SMS = 'sms';
    const PAYMENT_TYPE_CARD = 'card';

    const CONFIRM_ERROR_TYPE_NONE = 0x00;
    const CONFIRM_ERROR_TYPE_TEMPORARY = 0x01;
    const CONFIRM_ERROR_TYPE_PERMANENT = 0x02;

    const ERROR_LOAD_X509_CERTIFICATE = 0x10000001;
    const ERROR_ENCRYPT_DATA = 0x10000002;

    const ERROR_PREPARE_MANDATORY_PROPERTIES_UNSET = 0x11000001;

    const ERROR_FACTORY_BY_XML_ORDER_ELEM_NOT_FOUND = 0x20000001;
    const ERROR_FACTORY_BY_XML_ORDER_TYPE_ATTR_NOT_FOUND = 0x20000002;
    const ERROR_FACTORY_BY_XML_INVALID_TYPE = 0x20000003;

    const ERROR_LOAD_FROM_XML_ORDER_ID_ATTR_MISSING = 0x30000001;
    const ERROR_LOAD_FROM_XML_SIGNATURE_ELEM_MISSING = 0x30000002;

    const ERROR_CONFIRM_LOAD_PRIVATE_KEY = 0x300000f0;
    const ERROR_CONFIRM_FAILED_DECODING_DATA = 0x300000f1;
    const ERROR_CONFIRM_FAILED_DECODING_ENVELOPE_KEY = 0x300000f2;
    const ERROR_CONFIRM_FAILED_DECRYPT_DATA = 0x300000f3;
    const ERROR_CONFIRM_INVALID_POST_METHOD = 0x300000f4;
    const ERROR_CONFIRM_INVALID_POST_PARAMETERS = 0x300000f5;
    const ERROR_CONFIRM_INVALID_ACTION = 0x300000f6;

    const VERSION_QUERY_STRING = 0x01;
    const VERSION_XML = 0x02;

    #declare member variables
    /**
     * signatue (Mandatory)    - signature received from mobilpay.ro that identifies merchant account
     *
     * @var string(64)
     */
    public $signature = null;

    /**
     * service - identifier of service/product for which you're requesting a payment
     * Mandatory for Mobilpay_Payment_Request_Sms
     * Optional for Mobilpay_Payment_Request_Card
     */
    public $service = null;

    /**
     * orderId (Mandatory)    - payment transaction identifier generated by merchant;
     * helps merchant to interpret a request to confirm or return url;
     * it should be unique for the specified signature
     *
     * @var string(64)
     */
    public $orderId = null;
    public $timestamp = null;
    public $type = self::PAYMENT_TYPE_SMS;

    /**
     * @var null|Notify
     */
    public $notifyResponse = null;

    /**
     * returnUrl (Optional)    - URL where the user is redirected from mobilpay.ro payment interface
     * when the transaction is canceled or confirmed. If it is not supplied the application will use
     * return URL configured in control panel
     * use it only if you want to overwrite the configured one otherwise set it's value to NULL
     *
     * @var string
     */
    public $returnUrl = null;

    /**
     * confirmUrl (Optional)    - URL of the seller that will be requested when mobilpay.ro will make
     * a decision about payment (e.g. confirmed, canceled). If it is not supplied the application will use
     * confirm URL configured in control panel
     * use it only if you want to overwrite the configured one otherwise set it's value to NULL
     *
     * @var string
     */
    public $confirmUrl = null;
    public $cancelUrl = null;

    public $params = [];
    public $objReqNotify = null;

    protected $requestIdentifier = null;

    protected $objRequestParams = null;

    protected $objRequestInfo = null;
    /**
     * outEnvKey - output envelope key
     * in this property is stored the envelope key after encrypting data to send to payment interface
     */
    private $outEnvKey = null;
    /**
     * outEncData - output encrypted data
     * in this property is stored the encrypted data to send to payment interface
     */
    private $outEncData = null;

    /**
     * AbstractRequest constructor.
     */
    public function __construct()
    {
        srand((double)microtime() * 1000000);
        $this->requestIdentifier = md5(uniqid(rand()));

        $this->objRequestParams = new stdClass();
    }

    /**
     * @param $data
     * @return Card|Sms|null
     */
    public static function factory($data)
    {
        $objPmReq = null;
        $xmlDoc = new DOMDocument();
        if (@$xmlDoc->loadXML($data) === true) {
            //try to create payment request from xml
            $objPmReq = self::factoryFromXml($xmlDoc);
            $objPmReq->setRequestInfo(self::VERSION_XML, $data);
        }

        return $objPmReq;
    }

    /**
     * @param DOMDocument $xmlDoc
     * @return Card|Sms
     * @throws Exception
     */
    protected static function factoryFromXml(DOMDocument $xmlDoc)
    {
        $elems = $xmlDoc->getElementsByTagName('order');
        if ($elems->length != 1) {
            throw new Exception(
                'factoryFromXml order element not found',
                self::ERROR_FACTORY_BY_XML_ORDER_ELEM_NOT_FOUND
            );
        }
        $orderElem = $elems->item(0);

        $attr = $orderElem->attributes->getNamedItem('type');
        if ($attr == null || strlen($attr->nodeValue) == 0) {
            throw new Exception(
                'factoryFromXml invalid payment request type='.$attr->nodeValue,
                self::ERROR_FACTORY_BY_XML_ORDER_TYPE_ATTR_NOT_FOUND
            );
        }
        switch ($attr->nodeValue) {
            case self::PAYMENT_TYPE_CARD:
                $objPmReq = new Card();
                break;
            case self::PAYMENT_TYPE_SMS:
                $objPmReq = new Sms();
                break;
            default:
                throw new Exception(
                    'factoryFromXml invalid payment request type='.$attr->nodeValue,
                    self::ERROR_FACTORY_BY_XML_INVALID_TYPE
                );
                break;
        }
        $objPmReq->loadFromXml($orderElem);

        return $objPmReq;
    }

    /**
     * @param $reqVersion
     * @param $reqData
     */
    protected function setRequestInfo($reqVersion, $reqData)
    {
        $this->objRequestInfo = new stdClass();
        $this->objRequestInfo->reqVersion = $reqVersion;
        $this->objRequestInfo->reqData = $reqData;
    }

    /**
     * @return null
     */
    public function getRequestInfo()
    {
        return $this->objRequestInfo;
    }

    /**
     * @return string
     */
    public function getXML()
    {
        $this->prepare();

        return $this->xmlDoc->saveXML();
    }

    /**
     * @return mixed
     */
    abstract protected function prepare();

    /**
     * @return mixed
     */
    public function getEnvKey()
    {
        return $this->outEnvKey;
    }

    /**
     * @return mixed
     */
    public function getEncData()
    {
        return $this->outEncData;
    }

    /**
     * @return mixed
     */
    public function getRequestIdentifier()
    {
        return $this->requestIdentifier;
    }

    /**
     * @param $name
     * @return bool
     */
    public function __isset($name)
    {
        return (isset($this->objRequestParams) && isset($this->objRequestParams->$name));
    }

    /**
     * @param $name
     * @return null
     */
    public function __get($name)
    {
        if (!isset($this->objRequestParams) || !isset($this->objRequestParams->$name)) {
            return null;
        }

        return $this->objRequestParams->$name;
    }

    /**
     * @param $name
     * @param $value
     */
    public function __set($name, $value)
    {
        $this->objRequestParams->$name = $value;
    }

    public function __wakeup()
    {
        $this->objRequestParams = new stdClass();
    }

    /**
     * @return array
     */
    public function __sleep()
    {
        return ['_requestIdentifier', 'orderId', 'signature', 'returnUrl', 'confirmUrl', 'cancelUrl', 'params'];
    }

    /**
     * @param DOMElement $elem
     * @return mixed
     */
    abstract protected function loadFromXml(DOMElement $elem);

    /**
     * @param DOMElement $elem
     * @throws Exception
     */
    protected function parseFromXml(DOMElement $elem)
    {
        $xmlAttr = $elem->attributes->getNamedItem('id');
        if ($xmlAttr == null || strlen((string)$xmlAttr->nodeValue) == 0) {
            throw new Exception(
                'Mobilpay_Payment_Request_Sms::_parseFromXml failed: empty order id',
                self::ERROR_LOAD_FROM_XML_ORDER_ID_ATTR_MISSING
            );
        }
        $this->orderId = $xmlAttr->nodeValue;

        /** @var \DOMNodeList $elems */
        $elems = $elem->getElementsByTagName('signature');
        if ($elems->length != 1) {
            throw new Exception(
                'Mobilpay_Payment_Request_Sms::loadFromXml failed: signature is missing',
                self::ERROR_LOAD_FROM_XML_SIGNATURE_ELEM_MISSING
            );
        }
        $xmlElem = $elems->item(0);
        $this->signature = $xmlElem->nodeValue;

        $elems = $elem->getElementsByTagName('url');
        if ($elems->length == 1) {
            $xmlElem = $elems->item(0);
            //check for overwritten return url
            $elems = $xmlElem->getElementsByTagName('return');
            if ($elems->length == 1) {
                $this->returnUrl = $elems->item(0)->nodeValue;
            }
            //check for overwritten confirm url
            $elems = $xmlElem->getElementsByTagName('confirm');
            if ($elems->length == 1) {
                $this->confirmUrl = $elems->item(0)->nodeValue;
            }
            //check for overwritten cancel url
            $elems = $xmlElem->getElementsByTagName('cancel');
            if ($elems->length == 1) {
                $this->cancelUrl = $elems->item(0)->nodeValue;
            }
        }

        $this->params = [];
        $paramElems = $elem->getElementsByTagName('params');
        if ($paramElems->length == 1) {
            $paramElems = $paramElems->item(0)->getElementsByTagName('param');
            for ($i = 0; $i < $paramElems->length; $i++) {
                $xmlParam = $paramElems->item($i);
                $elems = $xmlParam->getElementsByTagName('name');
                if ($elems->length != 1) {
                    continue;
                }
                $paramName = $elems->item(0)->nodeValue;

                $elems = $xmlParam->getElementsByTagName('value');
                if ($elems->length != 1) {
                    continue;
                }

                $this->params[$paramName] = urldecode($elems->item(0)->nodeValue);
            }
        }

        $elems = $elem->getElementsByTagName('mobilpay');
        if ($elems->length == 1) {
            $this->notifyResponse = new Notify();
            $this->notifyResponse->loadFromXml($elems->item(0));
        }
    }
}
